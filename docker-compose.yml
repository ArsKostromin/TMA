services:
  web:
    build:
      context: .
    container_name: SG-backend
    command: uvicorn config.asgi:application --host 0.0.0.0 --port 8000 --log-level debug --proxy-headers
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    networks:
      - SG-network
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings

  celery:
    build:
      context: .
    container_name: SG-celery
    command: celery -A config worker --loglevel=info
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "celery -A config inspect ping -d celery@$$HOSTNAME | grep -q 'pong' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
      - postgres
    networks:
      - SG-network

  celery_beat:
    build:
      context: .
    container_name: SG-celery-beat
    command: celery -A config beat --loglevel=info
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pgrep -f 'celery beat' > /dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - .:/app
    env_file:
      - .env
    depends_on:
      - web
      - redis
      - postgres
    networks:
      - SG-network

  redis:
    image: redis:7
    container_name: SG-redis
    ports:
      - "6379:6379"
    networks:
      - SG-network

  postgres:
    image: postgres:14
    container_name: SG-postgres
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - SG-network

  nginx:
    image: fholzer/nginx-brotli:latest
    container_name: SG-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt
      - ./certbot:/var/www/certbot
      - ./staticfiles:/app/staticfiles
      - ./media:/app/media
      - /root/unity_build:/var/www/unity
    depends_on:
      - web
    networks:
      - SG-network

  # userbot:
  #   build:
  #     context: ./userbot
  #   container_name: SG-userbot
  #   restart: unless-stopped
  #   volumes:
  #     - ./userbot/session:/app/session
  #     # üí° –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é media-–ø–∞–ø–∫—É
  #     - ./media:/app/media
  #   environment:
  #     - API_ID=${API_ID}
  #     - API_HASH=${API_HASH}
  #     - PHONE_NUMBER=${PHONE_NUMBER}
  #     - LOGIN_CODE=${LOGIN_CODE}
  #     - API_BASE_URL=${API_BASE_URL:-http://web:8000}
  #     - API_TOKEN=${API_TOKEN}
  #     - USER_ID=${USER_ID}
  #   networks:
  #     - SG-network


  userbot:
    # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–±–æ—Ä–∫–∏: –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Dockerfile, main.py –∏ requirements.txt
    # –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –ø–∞–ø–∫–∏ ./userbot
    build:
      context: ./userbot 
      
    container_name: SG-userbot
    restart: unless-stopped
    # –ú–∞–ø–ø–∏–Ω–≥ –ø–æ—Ä—Ç–æ–≤: 8080 - —ç—Ç–æ –ø–æ—Ä—Ç, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Å–ª—É—à–∞–µ—Ç Uvicorn (FastAPI) –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    ports:
      - "8080:8080"
    volumes:
      # –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ Pyrogram. –§–∞–π–ª —Å–µ—Å—Å–∏–∏ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–π –ø–∞–ø–∫–∏.
      - ./session:/app/session
      # –û–±—â–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –º–µ–¥–∏–∞, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏
      - ./media:/app/media
      
    # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Pyrogram (API_ID, API_HASH) –∏ FastAPI (API_TOKEN)
    environment:
      - API_ID=${API_ID}
      - API_HASH=${API_HASH}
      - PHONE_NUMBER=${PHONE_NUMBER} # –ù—É–∂–µ–Ω Pyrogram –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞
      - LOGIN_CODE=${LOGIN_CODE}     # –ù—É–∂–µ–Ω –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ Pyrogram –Ω–µ –º–æ–∂–µ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ
      - API_BASE_URL=${API_BASE_URL:-http://userbot:8080} # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ userbot:8080, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –∏–º—è —Å–µ—Ä–≤–∏—Å–∞
      - API_TOKEN=${API_TOKEN}
      - USER_ID=${USER_ID}
      
    networks:
      - SG-network

networks:
  SG-network:
    driver: bridge

volumes:
  postgres_data: