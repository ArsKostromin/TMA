"""
–ú–æ–¥—É–ª—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pyrogram –∫–ª–∏–µ–Ω—Ç–∞
"""
import logging
from pyrogram import Client
from config import API_ID, API_HASH, SESSION_PATH, PHONE_NUMBER, LOGIN_CODE
from .auth_handler import authorize_with_code, check_authorization_status

logger = logging.getLogger(__name__)


def create_client():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç Pyrogram
    """
    if not API_ID or not API_HASH:
        raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_ID –∏ API_HASH")

    logger.info("‚öôÔ∏è –°–æ–∑–¥–∞—é –∫–ª–∏–µ–Ω—Ç Pyrogram...")
    return Client(
        SESSION_PATH,
        api_id=int(API_ID),
        api_hash=API_HASH
    )


async def initialize_client(app):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    """
    await app.connect()

    if not await check_authorization_status(app):
        logger.info("üîê –°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∞—á–∏–Ω–∞—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...")
        ok = await authorize_with_code(app)
        if not ok:
            await app.disconnect()
            return False

    me = await app.get_me()
    user = f"{me.first_name or ''} (@{me.username})" if me else "Unknown"
    logger.info(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º: {user.strip()}")
    return True
