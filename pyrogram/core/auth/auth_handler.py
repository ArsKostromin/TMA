"""
–ú–æ–¥—É–ª—å –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Pyrogram-–∫–ª–∏–µ–Ω—Ç–∞
–†–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PHONE_NUMBER –∏ LOGIN_CODE
"""
import logging
from pyrogram.errors import SessionPasswordNeeded, PhoneCodeInvalid, PhoneCodeExpired
from config import PHONE_NUMBER, LOGIN_CODE

logger = logging.getLogger(__name__)


async def authorize_with_code(app):
    """
    –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∏ –∫–æ–¥—É (–∏–∑ .env)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤—Å—ë –æ–∫.
    """
    if not PHONE_NUMBER:
        logger.error("‚ùå PHONE_NUMBER –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return False

    try:
        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–º–µ—Ä: {PHONE_NUMBER}")
        sent = await app.send_code(PHONE_NUMBER)

        if not LOGIN_CODE:
            logger.error("‚ùå LOGIN_CODE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            logger.error("üí° –ü–æ–ª—É—á–∏ –∫–æ–¥ –∏–∑ SMS –∏ –¥–æ–±–∞–≤—å –µ–≥–æ –≤ .env")
            return False

        logger.info("üîë –ê–≤—Ç–æ—Ä–∏–∑—É—é—Å—å —Å –∫–æ–¥–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        await app.sign_in(PHONE_NUMBER, sent.phone_code_hash, LOGIN_CODE)

        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
        return True

    except PhoneCodeInvalid:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
        return False
    except PhoneCodeExpired:
        logger.error("‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫.")
        return False
    except SessionPasswordNeeded:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA. –û—Ç–∫–ª—é—á–∏ 2FA –∏–ª–∏ –¥–æ–±–∞–≤—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–∞—Ä–æ–ª—è.")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False


async def check_authorization_status(app):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç
    """
    try:
        me = await app.get_me()
        return me is not None
    except Exception:
        return False
