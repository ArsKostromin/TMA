"""
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Pyrogram-–∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (PHONE_NUMBER, LOGIN_CODE, PASSWORD)
–ë–µ–∑ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.
"""

import logging
from pyrogram.errors import SessionPasswordNeeded, PhoneCodeInvalid, PhoneCodeExpired
from config import PHONE_NUMBER, LOGIN_CODE, API_ID, API_HASH
from pyrogram import Client

logger = logging.getLogger(__name__)


async def authorize_with_code(app: Client):
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ config.py.
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç –Ω–∏–∫–∞–∫–æ–≥–æ –≤–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å.
    """
    if not PHONE_NUMBER:
        logger.error("‚ùå PHONE_NUMBER –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return False

    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —É–∂–µ –ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        me = await app.get_me()
        if me:
            logger.info(f"‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} (@{me.username})")
            return True
    except Exception:
        pass  # –ï—Å–ª–∏ –Ω–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω ‚Äî –∏–¥—ë–º –¥–∞–ª—å—à–µ

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥
        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–º–µ—Ä: {PHONE_NUMBER}")
        sent = await app.send_code(PHONE_NUMBER)

        if not LOGIN_CODE:
            logger.error("‚ö†Ô∏è LOGIN_CODE –Ω–µ –∑–∞–¥–∞–Ω. –£–∫–∞–∂–∏ –∫–æ–¥ –∏–∑ Telegram –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏.")
            return False

        # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ–π—Ç–∏ —Å –∫–æ–¥–æ–º
        logger.info("üîë –ê–≤—Ç–æ—Ä–∏–∑—É—é—Å—å —Å –∫–æ–¥–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        await app.sign_in(PHONE_NUMBER, sent.phone_code_hash, LOGIN_CODE)
        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        return True

    except SessionPasswordNeeded:
        logger.error("‚ùå –£ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–∫–ª—é—á—ë–Ω –ø–∞—Ä–æ–ª—å 2FA, –¥–æ–±–∞–≤—å –ø–æ–¥–¥–µ—Ä–∂–∫—É PASSWORD –≤ config.py.")
        return False
    except PhoneCodeInvalid:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å LOGIN_CODE.")
        return False
    except PhoneCodeExpired:
        logger.error("‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫. –ü–æ–ª—É—á–∏ –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.")
        return False
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False


async def check_authorization_status(app: Client):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç.
    """
    try:
        me = await app.get_me()
        if me:
            logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {me.first_name} (@{me.username})")
            return True
        return False
    except Exception:
        return False
