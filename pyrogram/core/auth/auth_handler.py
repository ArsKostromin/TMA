"""
–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Pyrogram-–∫–ª–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è PHONE_NUMBER –∏ LOGIN_CODE
"""
import logging
from pyrogram.errors import SessionPasswordNeeded, PhoneCodeInvalid, PhoneCodeExpired
from config import PHONE_NUMBER, LOGIN_CODE

logger = logging.getLogger(__name__)


async def authorize_with_code(app):
    """
    –ê–≤—Ç–æ—Ä–∏–∑—É–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∏ –∫–æ–¥—É (–∏–∑ .env).
    –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –∏ –∂–¥—ë—Ç, –ø–æ–∫–∞ —Ç—ã –¥–æ–±–∞–≤–∏—à—å –µ–≥–æ –≤ LOGIN_CODE –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—à—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
    –ü—Ä–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∑–∞–ø—É—Å–∫–∞—Ö ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å–µ—Å—Å–∏—é.
    """
    if not PHONE_NUMBER:
        logger.error("‚ùå PHONE_NUMBER –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
        return False

    try:
        # –ü—Ä–æ–≤–µ—Ä–∏–º, —É–∂–µ –ª–∏ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
        me = await app.get_me()
        if me:
            logger.info(f"‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} (@{me.username})")
            return True
    except Exception:
        pass

    try:
        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–º–µ—Ä: {PHONE_NUMBER}")
        sent = await app.send_code(PHONE_NUMBER)

        if not LOGIN_CODE:
            logger.warning("üí° LOGIN_CODE –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ‚Äî –¥–æ–±–∞–≤—å –∫–æ–¥ –∏–∑ SMS –≤ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.")
            return False

        logger.info("üîë –ê–≤—Ç–æ—Ä–∏–∑—É—é—Å—å —Å –∫–æ–¥–æ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        await app.sign_in(PHONE_NUMBER, sent.phone_code_hash, LOGIN_CODE)
        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
        return True

    except PhoneCodeInvalid:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å LOGIN_CODE.")
        return False
    except PhoneCodeExpired:
        logger.error("‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫. –ü–æ–ª—É—á–∏ –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.")
        return False
    except SessionPasswordNeeded:
        logger.error("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å 2FA. –î–æ–±–∞–≤—å –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ –∫–æ–¥–µ.")
        return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
        return False


async def check_authorization_status(app):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –∫–ª–∏–µ–Ω—Ç.
    """
    try:
        me = await app.get_me()
        return me is not None
    except Exception:
        return False
