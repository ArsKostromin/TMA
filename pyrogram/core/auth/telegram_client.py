"""
–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram –∫–ª–∏–µ–Ω—Ç–∞
"""
import os
import logging
from pyrogram import Client
from config import API_ID, API_HASH, SESSION_PATH, PHONE_NUMBER, LOGIN_CODE
from .auth_handler import authorize_with_code, check_authorization_status

logger = logging.getLogger(__name__)


def create_client():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç Pyrogram
    """
    if not API_ID or not API_HASH:
        raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã API_ID –∏ API_HASH –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

    session_file = SESSION_PATH if SESSION_PATH.endswith(".session") else f"{SESSION_PATH}.session"
    session_exists = os.path.exists(session_file)
    if session_exists:
        logger.info(f"üóùÔ∏è –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
    else:
        logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–¥—É.")

    return Client(
        SESSION_PATH,
        api_id=int(API_ID),
        api_hash=API_HASH
    )



async def initialize_client():
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Pyrogram –±–µ–∑ input().
    –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±–µ—Ä—É—Ç—Å—è –∏–∑ config.py (–ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è).
    """
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram –∫–ª–∏–µ–Ω—Ç–∞...")

        # –∏–º—è —Å–µ—Å—Å–∏–∏ –±–µ–∑ .session
        session_name = SESSION_PATH.replace(".session", "")
        session_dir = os.path.dirname(SESSION_PATH) or "."

        app = Client(
            name=session_name,
            api_id=API_ID,
            api_hash=API_HASH,
            workdir=session_dir
        )

        await app.connect()

        try:
            me = await app.get_me()
            if me:
                logger.info(f"‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ {me.first_name} (@{me.username})")
                return app
        except Exception:
            pass

        if not PHONE_NUMBER:
            raise ValueError("‚ùå PHONE_NUMBER –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

        logger.info(f"üì± –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–¥ –Ω–∞ {PHONE_NUMBER}...")
        sent = await app.send_code(PHONE_NUMBER)

        if not LOGIN_CODE:
            raise ValueError("‚ùå LOGIN_CODE –Ω–µ –∑–∞–¥–∞–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä")

        logger.info("üîë –ü—Ä–æ–±—É—é –≤–æ–π—Ç–∏ —Å LOGIN_CODE –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞...")
        await app.sign_in(PHONE_NUMBER, sent.phone_code_hash, LOGIN_CODE)
        logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ, —Å–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")

        return app

    except PhoneCodeInvalid:
        logger.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å LOGIN_CODE.")
    except PhoneCodeExpired:
        logger.error("‚ùå –ö–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫. –ü–æ–ª—É—á–∏ –Ω–æ–≤—ã–π –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏.")
    except SessionPasswordNeeded:
        logger.error("‚ùå –í–∫–ª—é—á–µ–Ω–∞ 2FA. –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ).")
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
    finally:
        try:
            await app.disconnect()
        except Exception:
            pass

    return None