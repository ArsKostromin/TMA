"""
–°–æ–∑–¥–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram –∫–ª–∏–µ–Ω—Ç–∞
"""
import os
import logging
from pyrogram import Client
from config import API_ID, API_HASH, SESSION_PATH, PHONE_NUMBER, LOGIN_CODE
from .auth_handler import authorize_with_code, check_authorization_status

logger = logging.getLogger(__name__)


def create_client():
    """
    –°–æ–∑–¥–∞—ë—Ç –∫–ª–∏–µ–Ω—Ç Pyrogram
    """
    if not API_ID or not API_HASH:
        raise ValueError("‚ùå –ù–µ –∑–∞–¥–∞–Ω—ã API_ID –∏ API_HASH –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")

    session_file = SESSION_PATH if SESSION_PATH.endswith(".session") else f"{SESSION_PATH}.session"
    session_exists = os.path.exists(session_file)
    if session_exists:
        logger.info(f"üóùÔ∏è –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏: {session_file}")
    else:
        logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî —Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–æ–¥—É.")

    return Client(
        SESSION_PATH,
        api_id=int(API_ID),
        api_hash=API_HASH
    )


async def initialize_client():
    try:
        logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pyrogram –∫–ª–∏–µ–Ω—Ç–∞...")

        # –ø—É—Ç—å –∫ —Å–µ—Å—Å–∏–∏
        session_name = SESSION_PATH.replace(".session", "")

        app = Client(
            session_name,
            api_id=API_ID,
            api_hash=API_HASH,
            workdir=os.path.dirname(SESSION_PATH) or "."
        )

        await app.connect()

        if not await app.get_me():
            logger.info("üîê –ü–µ—Ä–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")

            # –µ—Å–ª–∏ –ª–æ–≥–∏–Ω-–∫–æ–¥ –∑–∞—Ä–∞–Ω–µ–µ –ø–µ—Ä–µ–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä —á–µ—Ä–µ–∑ env)
            if LOGIN_CODE:
                await app.sign_in(PHONE_NUMBER, LOGIN_CODE)
                logger.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ LOGIN_CODE –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
            else:
                # –µ—Å–ª–∏ –∫–æ–¥–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –µ–≥–æ –∏–∑ Telegram (–ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫)
                sent = await app.send_code(PHONE_NUMBER)
                logger.info("üì® –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")

                code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")
                await app.sign_in(PHONE_NUMBER, code, phone_code_hash=sent.phone_code_hash)

        me = await app.get_me()
        logger.info(f"üéØ –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω: @{me.username}")

        return app

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        raise