import logging
import asyncio
from pyrogram import Client
from pyrogram.errors import RPCError, StargiftUsageLimited

logger = logging.getLogger("pyrogram-main.sender")


async def send_gift_to_user(app: Client, peer_id: int, gift_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ (NFT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Pyrogram –º–µ—Ç–æ–¥ send_gift.

    :param app: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Pyrogram
    :param peer_id: Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    :param gift_id: ID –ø–æ–¥–∞—Ä–∫–∞ (NFT)
    :return: True, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        logger.info(f"üéÅ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ ID={gift_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID={peer_id}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        balance = await app.get_stars_balance()
        logger.info(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")

        if balance <= 0:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ API Pyrogram
        result = await app.send_gift(
            chat_id=peer_id,
            gift_id=gift_id,
            is_private=True,
        )

        logger.info(f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {peer_id}! –û—Ç–≤–µ—Ç API: {result}")
        return True

    except StargiftUsageLimited:
        logger.warning(f"‚ö†Ô∏è –°–∞–ø–ª–∞–π –ø–æ–¥–∞—Ä–∫–∞ ID={gift_id} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
        return False

    except RPCError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ RPC –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        return False

    except Exception as e:
        logger.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}", exc_info=True)
        return False


async def show_my_gifts(app: Client):
    """
    –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ (–≤–∫–ª—é—á–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã–µ) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö –≤ –ª–æ–≥.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Kurigram API method get_chat_gifts().
    """
    try:
        logger.info("üì¶ –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ–¥–∞—Ä–∫–∏ —á–µ—Ä–µ–∑ Kurigram API‚Ä¶")

        # –ø–æ–ª—É—á–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ–¥–∞—Ä–∫–æ–≤
        gifts_gen = app.get_chat_gifts(chat_id="me")  # –∏–ª–∏ user_id
        found = False

        async for gift in gifts_gen:
            found = True
            # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç gift –∏–º–µ–µ—Ç –ø–æ–ª—è id, name/title, price –∏–ª–∏ cost, owner_id, rarity –∏ —Ç.–¥.
            gift_id = getattr(gift, "id", None)
            name = getattr(gift, "name", getattr(gift, "title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"))
            price = getattr(gift, "price", None)
            owner = getattr(gift, "owner_id", None)
            logger.info(f"üéÅ –ü–æ–¥–∞—Ä–æ–∫: {name} | ID={gift_id} | –¶–µ–Ω–∞: {price} –∑–≤—ë–∑–¥ | –í–ª–∞–¥–µ–ª–µ—Ü: {owner}")

        if not found:
            logger.info("‚ö†Ô∏è –£ —Ç–µ–±—è –Ω–µ—Ç –ø–æ–¥–∞—Ä–∫–æ–≤ (–∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫).")

    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤: {e}", exc_info=True)
