import logging
from pyrogram import Client
from pyrogram.errors import RPCError, StargiftUsageLimited

logger = logging.getLogger("pyrogram-main.sender")


async def send_gift_to_user(app: Client, peer_id: int, gift_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥–∞—Ä–æ–∫ (NFT) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Pyrogram –º–µ—Ç–æ–¥ send_gift.

    :param app: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç Pyrogram
    :param peer_id: Telegram ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    :param gift_id: ID –ø–æ–¥–∞—Ä–∫–∞ (NFT)
    :return: True, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ, –∏–Ω–∞—á–µ False
    """
    try:
        logger.info(f"üéÅ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ ID={gift_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID={peer_id}...")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        balance = await app.get_stars_balance()
        logger.info(f"üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance}")

        if balance <= 0:
            logger.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–∞—Ä–∫–∞")
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –∏ –º–æ–∂–Ω–æ –ª–∏ –µ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        try:
            gift_info = await app.get_gift(gift_id)
            logger.info(f"üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∞—Ä–∫–µ: {gift_info}")

            # –í—ã–≤–µ–¥–µ–º –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ—É
            name = getattr(gift_info, "title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            price = getattr(gift_info, "price", None)
            supply_left = getattr(gift_info, "supply_left", None)
            can_send = getattr(gift_info, "can_send", True)
            is_available = getattr(gift_info, "is_available", True)

            logger.info(f"üéÄ –ü–æ–¥–∞—Ä–æ–∫: {name} | üí∏ –¶–µ–Ω–∞: {price} | üßÆ –û—Å—Ç–∞—Ç–æ–∫: {supply_left} | üì§ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {can_send} | üîì –î–æ—Å—Ç—É–ø–µ–Ω: {is_available}")

            if not is_available:
                logger.warning("‚ö†Ô∏è –ü–æ–¥–∞—Ä–æ–∫ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                return False
            if not can_send:
                logger.warning("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ä—É—á–Ω—É—é.")
                return False
            if supply_left is not None and supply_left <= 0:
                logger.warning("‚ö†Ô∏è –°–∞–ø–ª–∞–π –ø–æ–¥–∞—Ä–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è.")
                return False
            if price is not None and balance < price:
                logger.warning(f"‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–Ω—É–∂–Ω–æ {price}, –µ—Å—Ç—å {balance}).")
                return False

        except RPCError as e:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ä–∫–µ: {e}")
            return False

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–∞—Ä–æ–∫ —á–µ—Ä–µ–∑ API Pyrogram
        result = await app.send_gift(
            chat_id=peer_id,
            gift_id=gift_id,
            is_private=True,
        )

        logger.info(f"‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {peer_id}! –û—Ç–≤–µ—Ç API: {result}")
        return True

    except StargiftUsageLimited:
        logger.warning(f"‚ö†Ô∏è –°–∞–ø–ª–∞–π –ø–æ–¥–∞—Ä–∫–∞ ID={gift_id} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
        return False

    except RPCError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ RPC –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}")
        return False

    except Exception as e:
        logger.error(f"üí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥–∞—Ä–∫–∞: {e}", exc_info=True)
        return False
