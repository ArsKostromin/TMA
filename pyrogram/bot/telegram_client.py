# userbot/core/telegram_client.py

"""
–ú–æ–¥—É–ª—å –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram –∫–ª–∏–µ–Ω—Ç–∞
–°–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API
"""
import logging
import os
from pyrogram import Client
from pyrogram.errors import SessionPasswordNeeded, SessionExpired, SessionPasswordNeeded
from config import API_ID, API_HASH, SESSION_PATH
from .auth_handler import authorize_with_code, check_authorization_status # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à auth_handler

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
_client_instance = None


def create_client() -> Client:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Pyrogram –∫–ª–∏–µ–Ω—Ç
    """
    global _client_instance
    try:
        # Pyrogram –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —á–∏—Ç–∞–µ—Ç API_ID –∏ API_HASH –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è,
        # –Ω–æ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —è–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –∫–∞–∫ –≤ –≤–∞—à–µ–º –∫–æ–¥–µ Telethon.
        if not API_ID or not API_HASH:
            raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è API_ID –∏–ª–∏ API_HASH.")
        
        # –í Pyrogram SESSION_PATH - —ç—Ç–æ –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å–µ—Å—Å–∏–∏.
        api_id = int(API_ID)
        
        client = Client(
            name=SESSION_PATH,      # –ò–º—è —Å–µ—Å—Å–∏–∏ (–±—É–¥–µ—Ç —Ñ–∞–π–ª–æ–º .session)
            api_id=api_id,
            api_hash=API_HASH
        )
        _client_instance = client
        return client
        
    except (ValueError, TypeError) as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.error("‚û°Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API_ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, –∏ –æ–±–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        raise


def get_client() -> Client:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∏–µ–Ω—Ç–∞
    """
    if _client_instance is None:
         logger.error("‚ùå –ö–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –í—ã–∑–æ–≤–∏—Ç–µ create_client() —Å–Ω–∞—á–∞–ª–∞.")
         raise RuntimeError("–ö–ª–∏–µ–Ω—Ç Pyrogram –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
    return _client_instance

async def initialize_client(client: Client) -> bool:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–ª–∏–µ–Ω—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç/–≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.
    –í Pyrogram client.start() - —ç—Ç–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä,
    –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.
    """
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç. Pyrogram —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    # (–∑–∞–ø—Ä–æ—Å –∫–æ–¥–∞, –ø–∞—Ä–æ–ª—è) –µ—Å–ª–∏ —Å–µ—Å—Å–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞.
    try:
        # client.start() –≤—ã–ø–æ–ª–Ω—è–µ—Ç connect() –∏ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        await client.start() 
        logger.info("‚úÖ –ö–ª–∏–µ–Ω—Ç Pyrogram –∑–∞–ø—É—â–µ–Ω (–ø–æ–¥–∫–ª—é—á–µ–Ω).")

    except SessionExpired:
        logger.warning("‚ö†Ô∏è –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è. –£–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª —Å–µ—Å—Å–∏–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞.")
        return False
    except SessionPasswordNeeded:
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ 2FA, –∫–ª–∏–µ–Ω—Ç –≤—ã–≤–µ–¥–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –∫–æ–Ω—Å–æ–ª—å, –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫.
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, —Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å client.log_in() —Å –ø–∞—Ä–æ–ª–µ–º.
        logger.info("üîê –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è (2FA).")
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∑–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ Pyrogram —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–≤–æ–¥.
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        return False
        
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
    me = await client.get_me()
    
    if me:
        user_info = f"{me.first_name or ''} (@{me.username})" if me.username else f"{me.first_name or ''}"
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–¥ –∞–∫–∫–∞—É–Ω—Ç–æ–º: {user_info.strip()}")
        return True
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        await client.stop()
        return False