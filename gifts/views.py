# views.py
import logging
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework import status, generics
from drf_yasg.utils import swagger_auto_schema
from .serializers import GiftSerializer, WithdrawGiftRequestSerializer
from .services.userbot_client import UserbotClient
from transactions.models import Transaction
from decimal import Decimal
from .services.inventory import InventoryService

logger = logging.getLogger(__name__)

class UserInventoryView(generics.ListAPIView):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    serializer_class = GiftSerializer
    permission_classes = [IsAuthenticated]

    def get_queryset(self):
        user = self.request.user
        logger.info(f"[Inventory] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id if user.is_authenticated else 'Anonymous'}")
        return InventoryService.get_user_inventory(user)


class UserAddsGift(APIView):
    permission_classes = [AllowAny]  # –º–æ–∂–Ω–æ –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Å—Ç–æ–º–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Ç–æ–∫–µ–Ω–∞

    @swagger_auto_schema(request_body=GiftSerializer)
    def post(self, request):
        logger.info("[UserAddsGift] –í—Ö–æ–¥—è—â–∏–π POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
        logger.info(f"[UserAddsGift] Headers: {request.headers}")
        logger.info(f"[UserAddsGift] Body: {request.data}")

        try:
            data = request.data.copy()

            if 'user' not in data:
                data['user'] = request.user.id if request.user.is_authenticated else None
                logger.info(f"[UserAddsGift] user_id –≤–∑—è—Ç –∏–∑ request.user: {data['user']}")
            else:
                logger.info(f"[UserAddsGift] user_id —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω: {data['user']}")

            serializer = GiftSerializer(data=data, context={"request": request})
            if not serializer.is_valid():
                logger.error(f"[UserAddsGift] –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {serializer.errors}")
                return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

            gift = serializer.save()
            logger.info(f"[UserAddsGift] üéÅ –ü–æ–¥–∞—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {gift.id} ({gift.name})")

            return Response(serializer.data, status=status.HTTP_201_CREATED)

        except Exception as e:
            logger.exception(f"[UserAddsGift] ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return Response({"detail": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class WithdrawGiftView(APIView):
    permission_classes = [IsAuthenticated]

    @swagger_auto_schema(request_body=WithdrawGiftRequestSerializer)
    def post(self, request):
        """
        –≠–Ω–¥–ø–æ–∏–Ω—Ç –≤—ã–≤–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞ —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–≥–æ Telegram-–∞–∫–∫–∞—É–Ω—Ç —á–µ—Ä–µ–∑ userbot.
        –®–∞–≥–∏:
          1) –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–∞–¥–µ–Ω–∏—è –ø–æ–¥–∞—Ä–∫–æ–º –∏ Stars)
          2) –í—ã–∑–æ–≤ userbot API –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –ø–æ–¥–∞—Ä–∫–∞
          3) –ü—Ä–∏ —É—Å–ø–µ—Ö–µ: —Å–ø–∏—Å–∞—Ç—å 25 Stars, –∑–∞–ø–∏—Å–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é, –æ—Ç–≤—è–∑–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ (user=None)
        """
        serializer = WithdrawGiftRequestSerializer(data=request.data, context={"request": request})
        if not serializer.is_valid():
            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

        user = serializer.validated_data["user_instance"]
        gift = serializer.validated_data["gift_instance"]
        to_telegram_id = serializer.validated_data["to_telegram_id"]
        fee_stars = int(serializer.validated_data.get("fee_stars", 25))

        # 2) –í—ã–∑–æ–≤ userbot
        transfer_res = UserbotClient.transfer_gift(
            to_telegram_id=to_telegram_id,
            gift_contract_address=gift.ton_contract_address,
            fee_stars=fee_stars,
        )

        if not transfer_res.ok:
            return Response(
                {"detail": transfer_res.error or "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫"},
                status=status.HTTP_502_BAD_GATEWAY,
            )

        # 3) –°–ø–∏—Å–∞–Ω–∏–µ Stars –∏ —Ñ–∏–∫—Å–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        try:
            user.subtract_stars(fee_stars)
            Transaction.objects.create(
                user=user,
                tx_type="commission",
                amount=Decimal(fee_stars),
                currency="Stars",
                description=f"–ö–æ–º–∏—Å—Å–∏—è –∑–∞ –ø–µ—Ä–µ–¥–∞—á—É –ø–æ–¥–∞—Ä–∫–∞ {gift.ton_contract_address}",
            )
        except Exception as e:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å ‚Äî –≤–µ—Ä–Ω—ë–º –æ—à–∏–±–∫—É (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
            return Response({"detail": str(e)}, status=status.HTTP_400_BAD_REQUEST)

        # 4) –£–±–∏—Ä–∞–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–æ–º (—Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —É—à—ë–ª –≤ Telegram –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        gift.user = None
        gift.save(update_fields=["user", "updated_at"])

        return Response(
            {
                "ok": True,
                "gift": {
                    "ton_contract_address": gift.ton_contract_address,
                    "name": gift.name,
                },
                "transfer": transfer_res.data or {},
                "balance_stars": user.balance_stars,
            },
            status=status.HTTP_200_OK,
        )