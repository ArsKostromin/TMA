# gifts/views.py
import logging
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework import status, generics
from drf_spectacular.utils import extend_schema, OpenApiResponse

from .serializers import GiftSerializer, GiftWithdrawSerializer
from .services.inventory import InventoryService
from .services.withdrawal import GiftWithdrawalService
from .services.withdrawal_request import GiftWithdrawalRequestService
from .services.userbot_client import send_test_request_to_userbot
from .utils.telegram_payments import create_stars_invoice


logger = logging.getLogger(__name__)


class UserInventoryView(generics.ListAPIView):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    serializer_class = GiftSerializer
    permission_classes = [IsAuthenticated]

    @extend_schema(
        responses={200: GiftSerializer(many=True)},
        summary="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ NFT-–ø–æ–¥–∞—Ä–∫–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Ç–µ–∫—É—â–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    )
    def get(self, request, *args, **kwargs):
        user = request.user
        logger.info(f"[Inventory] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        gifts = InventoryService.get_user_inventory(user)
        serializer = GiftSerializer(gifts, many=True, context={"request": request})
        return Response(serializer.data, status=status.HTTP_200_OK)


class UserAddsGift(APIView):
    permission_classes = [AllowAny]  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ —Ç–æ–∫–µ–Ω—É/–ø–æ–¥–ø–∏—Å–∏

    @extend_schema(
        request=GiftSerializer,
        responses={201: GiftSerializer},
        summary="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ NFT –ø–æ–¥–∞—Ä–∫–∞",
        description="""
        –î–æ–±–∞–≤–ª—è–µ—Ç NFT-–ø–æ–¥–∞—Ä–æ–∫ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —Å —Ç–∞–∫–∏–º `ton_contract_address` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.
        """,
    )
    def post(self, request):
        logger.info("[UserAddsGift] POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
        logger.info(f"[UserAddsGift] Body: {request.data}")

        try:
            data = request.data.copy()
            if "user" not in data:
                data["user"] = request.user.id if request.user.is_authenticated else None
                logger.info(f"[UserAddsGift] user_id –≤–∑—è—Ç –∏–∑ request.user: {data['user']}")
            else:
                logger.info(f"[UserAddsGift] user_id —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω: {data['user']}")

            serializer = GiftSerializer(data=data, context={"request": request})
            serializer.is_valid(raise_exception=True)

            gift = serializer.save()
            logger.info(f"[UserAddsGift] üéÅ –ü–æ–¥–∞—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {gift.id} ({gift.name})")

            return Response(serializer.data, status=status.HTTP_201_CREATED)

        except Exception as e:
            logger.exception(f"[UserAddsGift] ‚ùå –û—à–∏–±–∫–∞: {e}")
            return Response({"detail": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class WithdrawalOfNFT(APIView):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ NFT-–ø–æ–¥–∞—Ä–∫–∞.
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –Ω–∞ –æ–ø–ª–∞—Ç—É 25 –∑–≤—ë–∑–¥.
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ NFT –ø–æ–¥–∞—Ä–∫–∞",
        description="–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ NFT –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–≤–æ–π—Å –Ω–∞ –æ–ø–ª–∞—Ç—É 25 –∑–≤—ë–∑–¥. –ü–æ–¥–∞—Ä–æ–∫ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã.",
        request=GiftWithdrawSerializer,
        responses={
            200: OpenApiResponse(description="–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω, –∏–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"),
            403: OpenApiResponse(description="–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
            404: OpenApiResponse(description="–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω"),
            500: OpenApiResponse(description="–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞"),
        },
    )
    def post(self, request, *args, **kwargs):
        serializer = GiftWithdrawSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        gift_id = serializer.validated_data["gift_id"]
        user = request.user

        logger.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ NFT ID={gift_id}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        result = GiftWithdrawalRequestService.create_withdrawal_request(user, gift_id)
        
        if result["status"] != status.HTTP_200_OK:
            return Response(
                {"detail": result["detail"]},
                status=result["status"]
            )

        return Response(result, status=status.HTTP_200_OK)


class TelegramPaymentWebhook(APIView):
    """
    Webhook –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π Telegram Stars.
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è Telegram –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏–Ω–≤–æ–π—Å–∞.
    """
    permission_classes = [AllowAny]  # Telegram webhook –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

    @extend_schema(
        summary="Webhook –¥–ª—è —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π Telegram Stars",
        description="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –∏–Ω–≤–æ–π—Å–æ–≤ –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–æ–≤.",
        responses={
            200: OpenApiResponse(description="–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ"),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞"),
            500: OpenApiResponse(description="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"),
        },
    )
    def post(self, request, *args, **kwargs):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook –æ—Ç Telegram –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ.
        –û–∂–∏–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
        {
            "invoice_payload": "withdraw_gift_123",
            "telegram_payment_charge_id": "...",
            "provider_payment_charge_id": "..."
        }
        """
        logger.info(f"[TelegramPaymentWebhook] –ü–æ–ª—É—á–µ–Ω webhook: {request.data}")
        
        try:
            invoice_payload = request.data.get("invoice_payload")
            if not invoice_payload:
                logger.error("[TelegramPaymentWebhook] ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç invoice_payload")
                return Response(
                    {"detail": "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç invoice_payload"},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞
            if not invoice_payload.startswith("withdraw_gift_"):
                logger.warning(f"[TelegramPaymentWebhook] ‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π payload: {invoice_payload}")
                return Response(
                    {"detail": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞"},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
            success = GiftWithdrawalRequestService.process_successful_payment(invoice_payload)
            
            if success:
                logger.info(f"[TelegramPaymentWebhook] ‚úÖ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ: {invoice_payload}")
                return Response(
                    {"detail": "–ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ"},
                    status=status.HTTP_200_OK
                )
            else:
                logger.error(f"[TelegramPaymentWebhook] ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {invoice_payload}")
                return Response(
                    {"detail": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"},
                    status=status.HTTP_500_INTERNAL_SERVER_ERROR
                )
                
        except Exception as e:
            logger.exception(f"[TelegramPaymentWebhook] ‚ùå –û—à–∏–±–∫–∞: {e}")
            return Response(
                {"detail": f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook: {str(e)}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )