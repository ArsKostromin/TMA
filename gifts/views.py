# gifts/views.py
import logging
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.permissions import IsAuthenticated, AllowAny
from rest_framework import status, generics
from drf_spectacular.utils import extend_schema, OpenApiResponse

from .serializers import GiftSerializer, GiftWithdrawSerializer
from .services.inventory import InventoryService
from .services.withdrawal import GiftWithdrawalService
from .services.userbot_client import send_test_request_to_userbot
from .utils.telegram_payments import create_stars_invoice


logger = logging.getLogger(__name__)


class UserInventoryView(generics.ListAPIView):
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    serializer_class = GiftSerializer
    permission_classes = [IsAuthenticated]

    @extend_schema(
        responses={200: GiftSerializer(many=True)},
        summary="–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        description="–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ NFT-–ø–æ–¥–∞—Ä–∫–æ–≤, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏—Ö —Ç–µ–∫—É—â–µ–º—É –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
    )
    def get(self, request, *args, **kwargs):
        user = request.user
        logger.info(f"[Inventory] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")
        gifts = InventoryService.get_user_inventory(user)
        serializer = GiftSerializer(gifts, many=True, context={"request": request})
        return Response(serializer.data, status=status.HTTP_200_OK)


class UserAddsGift(APIView):
    permission_classes = [AllowAny]  # TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–æ —Ç–æ–∫–µ–Ω—É/–ø–æ–¥–ø–∏—Å–∏

    @extend_schema(
        request=GiftSerializer,
        responses={201: GiftSerializer},
        summary="–î–æ–±–∞–≤–ª–µ–Ω–∏–µ NFT –ø–æ–¥–∞—Ä–∫–∞",
        description="""
        –î–æ–±–∞–≤–ª—è–µ—Ç NFT-–ø–æ–¥–∞—Ä–æ–∫ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        –ï—Å–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —Å —Ç–∞–∫–∏–º `ton_contract_address` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.
        """,
    )
    def post(self, request):
        logger.info("[UserAddsGift] POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞")
        logger.info(f"[UserAddsGift] Body: {request.data}")

        try:
            data = request.data.copy()
            if "user" not in data:
                data["user"] = request.user.id if request.user.is_authenticated else None
                logger.info(f"[UserAddsGift] user_id –≤–∑—è—Ç –∏–∑ request.user: {data['user']}")
            else:
                logger.info(f"[UserAddsGift] user_id —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω: {data['user']}")

            serializer = GiftSerializer(data=data, context={"request": request})
            serializer.is_valid(raise_exception=True)

            gift = serializer.save()
            logger.info(f"[UserAddsGift] üéÅ –ü–æ–¥–∞—Ä–æ–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {gift.id} ({gift.name})")

            return Response(serializer.data, status=status.HTTP_201_CREATED)

        except Exception as e:
            logger.exception(f"[UserAddsGift] ‚ùå –û—à–∏–±–∫–∞: {e}")
            return Response({"detail": str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)


class WithdrawalOfNFT(APIView):
    """
    –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ (—É–¥–∞–ª–µ–Ω–∏—è) NFT-–ø–æ–¥–∞—Ä–∫–∞.
    –ü–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –≤—ã–≤–æ–¥–∞ ‚Äî —Å–æ–∑–¥–∞—ë—Ç –æ–ø–ª–∞—Ç—É –Ω–∞ 25 –∑–≤—ë–∑–¥ (XTR).
    """
    permission_classes = [IsAuthenticated]

    @extend_schema(
        summary="–í—ã–≤–æ–¥ NFT –ø–æ–¥–∞—Ä–∫–∞ —Å –æ–ø–ª–∞—Ç–æ–π 25‚≠ê",
        description="–ü–µ—Ä–µ–¥ –≤—ã–≤–æ–¥–æ–º NFT —Å–æ–∑–¥–∞—ë—Ç Telegram-–∏–Ω–≤–æ–π—Å –Ω–∞ 25 –∑–≤—ë–∑–¥ (Stars).",
        request=GiftWithdrawSerializer,
        responses={
            200: OpenApiResponse(description="–ò–Ω–≤–æ–π—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"),
            400: OpenApiResponse(description="–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö"),
            500: OpenApiResponse(description="–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Telegram –∏–ª–∏ userbot"),
        },
    )
    def post(self, request, *args, **kwargs):
        serializer = GiftWithdrawSerializer(data=request.data)
        serializer.is_valid(raise_exception=True)

        gift_id = serializer.validated_data["gift_id"]
        user = request.user

        logger.info(f"üì§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–≤–æ–¥ NFT ID={gift_id}")

        # –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å –Ω–∞ 25 –∑–≤—ë–∑–¥
        invoice = create_stars_invoice(user, gift_id, amount=25)
        if not invoice.get("ok"):
            logger.error(f"üíÄ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å: {invoice.get('error')}")
            return Response(
                {"detail": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {invoice.get('error')}"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR,
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ userbot‚Äô—É
        send_test_request_to_userbot({
            "user_id": user.id,
            "username": user.username,
            "gift_id": gift_id,
            "invoice_payload": invoice["payload"]["payload"],
        })

        return Response({
            "detail": "–ò–Ω–≤–æ–π—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram –¥–ª—è –æ–ø–ª–∞—Ç—ã 25‚≠ê",
            "invoice_message_id": invoice["data"].get("message_id"),
        }, status=200)