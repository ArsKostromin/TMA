# gifts/services/withdrawal.py
import logging
from django.db import transaction
from rest_framework import status
from gifts.models import Gift

logger = logging.getLogger(__name__)


class GiftWithdrawalService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–≤–æ–¥–∞ NFT-–ø–æ–¥–∞—Ä–∫–æ–≤.
    """

    @staticmethod
    @transaction.atomic
    def withdraw_gift(user, gift_id: int):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ —É–¥–∞–ª—è–µ—Ç –µ–≥–æ –∏–∑ –ë–î.
        """
        logger.info(f"[GiftWithdrawalService] üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–≤–æ–¥–∞ NFT ID={gift_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")

        try:
            gift = Gift.objects.select_for_update().get(id=gift_id)
        except Gift.DoesNotExist:
            logger.warning(f"[GiftWithdrawalService] ‚ùå –ü–æ–¥–∞—Ä–æ–∫ ID={gift_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {
                "status": status.HTTP_404_NOT_FOUND,
                "detail": "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            }

        if gift.user != user:
            logger.warning(f"[GiftWithdrawalService] üö´ –ü–æ–¥–∞—Ä–æ–∫ ID={gift_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            return {
                "status": status.HTTP_403_FORBIDDEN,
                "detail": "–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç."
            }

        # –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ NFT –≤ –±–ª–æ–∫—á–µ–π–Ω
        # send_to_ton_wallet(user_wallet, gift.ton_contract_address)

        gift_name = gift.name
        gift_contract = gift.ton_contract_address
        gift.delete()

        logger.info(f"[GiftWithdrawalService] ‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—ã–≤–æ–¥ NFT {gift_name} ({gift_contract}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
        return {
            "status": status.HTTP_200_OK,
            "detail": f"–ü–æ–¥–∞—Ä–æ–∫ {gift_name} ({gift_contract}) —É—Å–ø–µ—à–Ω–æ –≤—ã–≤–µ–¥–µ–Ω –∏ —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã."
        }
