# gifts/services/withdrawal_request.py
import logging
from django.db import transaction
from rest_framework import status
from gifts.models import Gift
from gifts.utils.telegram_payments import create_stars_invoice

logger = logging.getLogger(__name__)


class GiftWithdrawalRequestService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ NFT-–ø–æ–¥–∞—Ä–∫–æ–≤.
    –†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É.
    """

    @staticmethod
    @transaction.atomic
    def create_withdrawal_request(user, gift_id: int):
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã.
        """
        logger.info(f"[GiftWithdrawalRequestService] üîç –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥ NFT ID={gift_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")

        try:
            gift = Gift.objects.select_for_update().get(id=gift_id)
        except Gift.DoesNotExist:
            logger.warning(f"[GiftWithdrawalRequestService] ‚ùå –ü–æ–¥–∞—Ä–æ–∫ ID={gift_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {
                "status": status.HTTP_404_NOT_FOUND,
                "detail": "–ü–æ–¥–∞—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω."
            }

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–∞—Ä–∫–∞
        if gift.user != user:
            logger.warning(f"[GiftWithdrawalRequestService] üö´ –ü–æ–¥–∞—Ä–æ–∫ ID={gift_id} –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
            return {
                "status": status.HTTP_403_FORBIDDEN,
                "detail": "–≠—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç."
            }

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
        invoice_result = create_stars_invoice(user, gift_id, amount=25)
        
        if not invoice_result.get("ok"):
            logger.error(f"[GiftWithdrawalRequestService] üíÄ –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–≤–æ–π—Å: {invoice_result.get('error')}")
            return {
                "status": status.HTTP_500_INTERNAL_SERVER_ERROR,
                "detail": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {invoice_result.get('error')}"
            }

        logger.info(f"[GiftWithdrawalRequestService] ‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞ {gift.name}")
        
        return {
            "status": status.HTTP_200_OK,
            "detail": "–ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω. –û–ø–ª–∞—Ç–∏—Ç–µ 25‚≠ê –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞.",
            "data": {
                "invoice_id": invoice_result.get("invoice_id"),
                "pay_url": invoice_result.get("pay_url"),
                "gift_info": {
                    "id": gift.id,
                    "name": gift.name,
                    "ton_contract_address": gift.ton_contract_address,
                    "image_url": gift.image_url
                },
                "amount_stars": 25,
                "payload": invoice_result.get("payload")
            }
        }

    @staticmethod
    @transaction.atomic
    def process_successful_payment(invoice_payload: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞.
        """
        logger.info(f"[GiftWithdrawalRequestService] üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã: {invoice_payload}")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º gift_id –∏–∑ payload (—Ñ–æ—Ä–º–∞—Ç: withdraw_gift_{gift_id})
            if not invoice_payload.startswith("withdraw_gift_"):
                logger.error(f"[GiftWithdrawalRequestService] ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç payload: {invoice_payload}")
                return False
                
            gift_id = int(invoice_payload.replace("withdraw_gift_", ""))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                gift = Gift.objects.get(id=gift_id)
            except Gift.DoesNotExist:
                logger.error(f"[GiftWithdrawalRequestService] ‚ùå –ü–æ–¥–∞—Ä–æ–∫ ID={gift_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞
            from gifts.services.withdrawal import GiftWithdrawalService
            withdrawal_result = GiftWithdrawalService.withdraw_gift(
                gift.user, 
                gift.id
            )
            
            if withdrawal_result["status"] == status.HTTP_200_OK:
                logger.info(f"[GiftWithdrawalRequestService] ‚úÖ –í—ã–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω: {gift.name}")
                return True
            else:
                logger.error(f"[GiftWithdrawalRequestService] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø–æ–¥–∞—Ä–∫–∞: {withdrawal_result}")
                return False
                
        except Exception as e:
            logger.exception(f"[GiftWithdrawalRequestService] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
            return False
